// /prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum YogaType {
  HATHA
  VINYASA
  ASHTANGA
  RESTORATIVE
  HOT
  POWER
}

enum YogaLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum UserRole {
  USER
  INSTRUCTOR
  ADMIN
}

enum BookingStatus {
  BOOKED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentProvider {
  PAYMAYA
  GCASH
  PAYMONGO
}

enum TransactionType {
  BOOKING
  SUBSCRIPTION
  PACKAGE
}

model Address{
  id          String   @id @default(cuid())
  city        String
  barangay    String
  country     String @default("Philippines")
  userProfile UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @unique

  @@map("addresses")
}

model UserProfile {
    id              String          @id @default(cuid())
  firstName       String
  middleName      String?
  lastName        String
  birthDate       DateTime         @db.Date  // Stores date only (YYYY-MM-DD)
  gender          Gender
  customGender    String?
  profilePicture  String?
  avatar          String?
  bio             String?
  role            UserRole        @default(USER)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  email           String          @unique
  phone           String?      @db.VarChar(15)  // Limit phone number length

  // Relationships
  address         Address?
  preferences     UserPreferences?
  bookings        BookingEvent[]
  instructedClasses YogaClass[]   @relation("InstructorClasses")
  userStats       UserStats?
  streakData      StreakData[]
  transactions    Transaction[]
  subscriptions   Subscription[]

  @@map("user_profiles")
}
model Subscription {
  id          String        @id @default(cuid())
  userId      String
  startDate   DateTime
  endDate     DateTime
  status      Boolean       @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relationships
  user        UserProfile   @relation(fields: [userId], references: [id])
  transaction Transaction?

  @@map("subscriptions")
}

// New Transaction Model
model Transaction {
  id              String          @id @default(cuid())
  userId          String
  amount          Decimal         @db.Decimal(10,2)
  currency        String          @default("PHP")
  type            TransactionType
  status          PaymentStatus   @default(PENDING)
  provider        PaymentProvider
  referenceId     String          @unique // Payment provider's reference
  metadata        Json?           // Additional payment details
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Optional relations based on transaction type
  bookingId       String?
  subscriptionId  String?         @unique

  // Relationships
  user            UserProfile     @relation(fields: [userId], references: [id])
  booking         BookingEvent?   @relation(fields: [bookingId], references: [id])
  subscription    Subscription?   @relation(fields: [subscriptionId], references: [id])

  @@map("transactions")
}


model UserPreferences {
  id              String          @id @default(cuid())
  userId          String          @unique
  yogaTypes       String[]        // Array of yoga types
  experienceLevel ExperienceLevel
  goals           String[]        // Array of goals
  
  // Relationship
  user            UserProfile     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// Enhanced YogaClass with pricing and schedule
model YogaClass {
  id            String    @id @default(cuid())
  name          String
  type          YogaType
  description   String
  duration      Int       // Duration in minutes
  level         YogaLevel
  instructorId  String
  maxCapacity   Int
  basePrice     Decimal   @db.Decimal(10,2)
  scheduleId    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  instructor    UserProfile    @relation("InstructorClasses", fields: [instructorId], references: [id])
  bookings      BookingEvent[]
  schedule      ClassSchedule? @relation(fields: [scheduleId], references: [id])

  @@map("yoga_classes")
}


// New ClassSchedule Model
model ClassSchedule {
  id            String      @id @default(cuid())
  dayOfWeek     Int        // 0-6 for Sunday-Saturday
  startTime     String     // HH:mm format
  endTime       String     // HH:mm format
  isRecurring   Boolean    @default(true)
  
  // Relationships
  classes       YogaClass[]

  @@map("class_schedules")
}

model BookingEvent {
  id           String        @id @default(cuid())
  userId       String
  classId      String
  instructorId String
  date         String        // You might want to use DateTime instead
  timeIn       String
  timeOut      String
  status       BookingStatus @default(BOOKED)
  createdAt    DateTime      @default(now())

  // Relationships
  user         UserProfile   @relation(fields: [userId], references: [id])
  class        YogaClass     @relation(fields: [classId], references: [id])
  transaction  Transaction[] 

  @@map("booking_events")
}

model UserStats {
  id                String      @id @default(cuid())
  userId            String      @unique
  classesJoined     Int         @default(0)
  hoursPracticed    Int         @default(0) // Hours as integer, or use Float for decimals
  favoriteYogaType  String?
  membershipSince   DateTime
  currentStreak     Int         @default(0)

  // Relationship
  user              UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
}

model StreakData {
  id        String      @id @default(cuid())
  userId    String
  date      String      // Consider using DateTime instead
  level     Int         // 0-4 levels
  classes   Int
  createdAt DateTime    @default(now())

  // Relationship
  user      UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("streak_data")

  // Composite unique constraint to prevent duplicate entries per user per date
  @@unique([userId, date])
}